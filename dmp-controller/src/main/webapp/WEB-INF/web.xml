<?xml version="1.0" encoding="UTF-8"?>
<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
	license agreements. See the NOTICE file distributed with this work for additional 
	information regarding copyright ownership. The ASF licenses this file to 
	you under the Apache License, Version 2.0 (the "License"); you may not use 
	this file except in compliance with the License. You may obtain a copy of 
	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under the 
	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
	OF ANY KIND, either express or implied. See the License for the specific 
	language governing permissions and limitations under the License. -->
<web-app id="dmp-controller" version="2.4"
	xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

	<display-name>dmp-controller</display-name>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:spring/spring.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>    
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>    
	</listener>
	<listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>
    
    
	<filter>
		<filter-name>encoding-filter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encoding-filter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- Spring Security -->
	<!-- 
		该过滤器初始化时，会根据该filtername 去spring容器中获取过滤代理对象delegate，而得到的类型对象是FilterChainProxy
		{
			查看该方法 HttpSecurityBeanDefinitionParser.registerFilterChainProxyIfNecessary 在初始化FilterChainProxy bean 定义时
			会判断spring bean定义容器中是否存在该对象，如果存在就返回，否则初始化该bean定义。
			初始化bean定义时 该bean的构造参数设置了一个 BeanIds.FILTER_CHAINS [类型ListFactoryBean] 的引用。
		}
		
		如果spring安全配置文件中配置多个http标签，根据上面的解释只会有一个FilterChainProxy生成，
		而它只是一层代理，通过匹配filterChains list属性中的SecurityFilterChain
		{
			SecurityFilterChain [实现类DefaultSecurityFilterChain]类型，此类型针对每个http标签都会产生一个对象
			查看该方法 HttpSecurityBeanDefinitionParser.createFilterChain 创建完DefaultSecurityFilterChain该定义bean的时候
			在parse方法中添加到一个 BeanIds.FILTER_CHAINS 名称的bean中。
			所以spring容器初始化时会用 BeanIds.FILTER_CHAINS 命名的bean 通过FilterChainProxy的构造方法注入其中。
		}
		获得对应的filter【这里的filter就是spring安全配置的filter】
		交给它的内部类VirtualFilterChain 去执行。
	-->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

	<!-- 自定义filter -->
	<filter>
		<filter-name>req</filter-name>
		<filter-class>com.admaster.dmp.filter.ReqFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>req</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>



	<!-- spring mvc -->
	<servlet>
		<servlet-name>spring web</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath*:spring/spring-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>spring web</servlet-name>
		<url-pattern>/*</url-pattern>
	</servlet-mapping>
	
</web-app>
